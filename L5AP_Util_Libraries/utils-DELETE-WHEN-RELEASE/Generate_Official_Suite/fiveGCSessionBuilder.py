#!/usr/bin/python3
##########################################################################
#  Update on V2: input changed from single ste to
#  a single directory containing multiple ste files
##########################################################################

##########################################################################
# Full Build: an official ste with all root test cases,
#             all 5GC sessions, all DMFs etc.
#             which is exactly the same with ste in LS release
# Partial Build: an official ste with only 5GC tests in the user ste directory
#                When generating partial build, all session XML and dmf 
#                XML files will be generated too, just in case you want to check on them
#                Limitation: Generated XML files cannot be submitted without
#         further verification, because: DMF files might be
#         changed by this, but not verified to with other existing 5GC tests
#         The other script five5GCCheckDmf can be called to check that 
##########################################################################

import os,sys,argparse
from os.path import exists
from datetime import date

from fiveGCCheckDmf import checkDmf

verbose = False

def parse_args():
    parser = argparse.ArgumentParser(description="Take a user ste as input, generate 5GC official test ste and corresponding perforce change list")
    parser.add_argument("inputSteDir", metavar="<User Ste Directory>",
            help="a directory containing user 5GC test sessions in ste.")
    parser.add_argument("p4ClientDir", metavar="<P4 Client /tc Directory>",
            help="perforce client directory /tc in a speficic branch where you want to submit your change.")
    parser.add_argument("-o", "--outputSte", metavar="<Output Ste>",
            help="resulting 5GC session will have name COAST99.9.<outputSte>.")
    parser.add_argument("--partial", default=False, action='store_true',
            help="partial official build. set it if need a build with only sessions in user ste directory")
    parser.add_argument("--verbose", default=False, action='store_true',
            help="print more debug lines")
    return parser.parse_args()


def verbose_print (_str):
	global verbose
	if verbose:
		print (_str)

# dirType can be session, sessionmf, TODO: tdf and vsa when needed
def processFolder(dirType, localDir, copyToDir, p4Dir, isPartial):
	succ = 0
	if dirType == 'session' or dirType == 'sessiondmf':
		fileExt = '.xml'
		five_gc_files = os.listdir(localDir)
		if len(five_gc_files) == 0:
			print ('WARNING: no ', dirType, ' files generated by SuiteReader!')
			succ = 1
			return succ
		else:
			print (len(five_gc_files), dirType, ' files generated(including non-xml files)')
			for five_gc_file in five_gc_files:
				if five_gc_file.endswith(fileExt):
					print (five_gc_file)
					local_file = os.path.join(localDir, five_gc_file)
					# update or add to the file in p4 directory
					file_in_p4 = os.path.join(p4Dir, five_gc_file)
					verbose_print ('checking if ' + file_in_p4 + ' exists')
					if exists(file_in_p4):
						print ('WARNING: file exists already, submiting it will overwrite the current version')
						verbose_print ('............Updating file in perforce')
						# it seems that "%" in file name will cause p4 failure
						file_in_p4_for_p4 = file_in_p4.replace('%', '%25')
						cmd = 'p4 edit "' + file_in_p4_for_p4 + '" 2>temp_result'
						verbose_print (cmd)
						if os.system(cmd)!=0:
							print ('ERROR: failed to open file in  perforce')
							succ = 1
						else:
							# check result output
							if exists('temp_result'):
								if os.path.getsize('temp_result')!=0:
									succ = 1
								else:
									verbose_print ('INFO: open file in perforce successfully')
									# copy the file to perforce folder
									cmd = 'cp "' + local_file + '"  "' + file_in_p4 + '"' 
									verbose_print (cmd)
									if os.system(cmd)!=0:
										verbose_print ('ERROR: failed to copy file to perforce')
										succ = 1
									else:
										verbose_print ('INFO: file  copied to perforce successfully')
							else:
								print ('Failed to find p4 command output')
								succ = 1
					else:
						# copy the file to perforce folder
						cmd = 'cp "' + local_file + '"  "' + file_in_p4 + '"' 
						verbose_print (cmd)
						if os.system(cmd)!=0:
							verbose_print ('ERROR: failed to copy file to perforce')
							succ = 1
						else:
							verbose_print ('INFO: file  copied to perforce successfully')
							cmd = 'p4 add "' + file_in_p4 + '" 2>temp_result'
							verbose_print (cmd)
							if os.system(cmd)!=0:
								verbose_print ('ERROR: failed to add file in perforce')
								# remove previously copied file
								cmd = 'rm -f ' + file_in_p4
								verbose_print (cmd)
								if os.system(cmd)!=0:
									verbose_print ('Failed to remove ' + file_in_p4 + '. Please manually remove')
									succ = 1
							else:
								# check result output
								if exists('temp_result'):
									if os.path.getsize('temp_result')!=0:
										# remove previously copied file
										cmd = 'rm -f ' + file_in_p4
										verbose_print (cmd)
										if os.system(cmd)!=0:
											print ('Failed to remove ' + file_in_p4 + '. Please manually remove')
											succ = 1
									else:
										verbose_print ('INFO: add file in perforce successfully')
								else:
									print ('Failed to find p4 command output')
									# remove previously copied file
									cmd = 'rm -f ' + file_in_p4
									verbose_print (cmd)
									if os.system(cmd)!=0:
										verbose_print ('Failed to remove ' + file_in_p4 + '. Please manually remove')
									succ = 1
								
					# if partial build, copy xml to local session or sessiondmf directory
					if isPartial:
						cmd = 'cp "' + local_file + '" ' + copyToDir
						verbose_print (cmd)
						if os.system(cmd)!=0:
							print ('............ERROR: failed to copy ' + local_file + ' to ' + copyToDir)
							succ = 1
						else:
							print ('............Done copying to ' + copyToDir)
						
	else:
		print ('Error: ' + dirType, ' not support right now')
		succ = 1

	return succ

def main(argv):
	global verbose

	# Read input ste directory, output ste name, library id, and p4 client dir
	opts = parse_args()

	verbose = opts.verbose

	# sanity check for input directory
	input_dir = opts.inputSteDir
	if input_dir[0] != "/":
		# not absolute path, convert to absolute path
		input_dir = os.path.join(os.getcwd(), input_dir)
	if not exists(input_dir):
		print ('Error: User ste directory ' + input_dir + ' does not exist')
		exit()	

	# save current directory, it will be used as work dir if partial build
	prevPath = os.getcwd()
	if not prevPath.endswith('/'):
		prevPath = prevPath + '/'

	# sanity check and reconstruct p4 directory
	if not exists(opts.p4ClientDir):
		print ('ERROR: ' + p4ClientDir + ' does not exist')
		exit()
	
	# p4 does not like "not-clean" path
	# so trying to get a "clean" path from system
	os.chdir(opts.p4ClientDir)	
	p4_dir = os.getcwd()

	if not p4_dir.endswith('/'):
		p4_dir = p4_dir + '/'
	if not p4_dir.endswith('/tc/'):
		print ('Error: p4 tc library does not look like a valid /tc directory')
		exit()
	# Check directories under /tc
	if not exists(p4_dir + 'tcl') or not exists(p4_dir + 'scenario') or \
         not exists(p4_dir + 'dmf') or not exists(p4_dir + 'tdf') or \
         not exists(p4_dir + 'session') or not exists(p4_dir + 'sessiondmf') or \
         not exists(p4_dir + 'java'):
		print ('ERROR: Please make sure all directories under ' + p4_dir + ' exist in your perforce client')
		exit()
	
	print ('\nUser ste directory:', input_dir)
	print ('Perforce /tc directory:', p4_dir)
	print ('is partial build?:',opts.partial)
	print ('verbose:',opts.verbose)

	isPartial = opts.partial

	# construct suffix for output ste filename
	outputSuffix = opts.outputSte
	if outputSuffix is None:
		today = date.today()
		# mm-dd
		outputSuffix = today.strftime("%m-%d")
	print ('Using "' + outputSuffix + '" as suffix in output ste name.')

	# switch to work dir, which is p4 dir if full build, current dir if partial build
	if isPartial:
		os.chdir(prevPath)

	work_dir = os.getcwd()
	if not work_dir.endswith('/'):
		work_dir = work_dir + '/'
	
	verbose_print ('work_dir is now:' + work_dir)

	dmf_dir = work_dir + 'dmf/'
	scenario_dir = work_dir + 'scenario/'
	tcl_dir = work_dir + 'tcl/'
	tdf_dir = work_dir + 'tdf/'
	java_dir = work_dir + 'java/'
	five_gc_session_dir = work_dir + 'session/'
	five_gc_dmf_dir = work_dir + 'sessiondmf/'
	# the following folders will be generated or modified by SuiteReader in this script
	five_gc_session_dir_tmp = work_dir + 'sessions/'
	five_gc_dmf_dir_tmp = work_dir + 'sessiondmfs/'
 
	p4_session_dir = p4_dir + 'session/'
	p4_dmf_dir = p4_dir + 'sessiondmf/'
	p4_java_dir = p4_dir + 'java/'

	# Check SuiteReader and TestSuiteReader
	suiteReader = p4_java_dir + 'SuiteReader.jar'
	testSuiteBuilder = p4_java_dir + 'TestSuiteBuilder.jar'

	if not exists(suiteReader) or not exists(testSuiteBuilder):
		print ('ERROR: Cannot find SuiteReader.jar or TestSuiteBuilder.jar in ' + p4_java_dir + '. Please sync /tc in your perforce client')
		exit()

	# if partial build, create session and sessiondmf directory
	if isPartial:
		if not exists(five_gc_session_dir):
			cmd = 'mkdir ' + five_gc_session_dir
			print (cmd)
			if os.system(cmd) != 0:
				status = 1
				verbose_print ('ERROR: cannot create ' + five_gc_session_dir)
				exit()
		else:
			print ('Warning: ' + five_gc_session_dir + ' not empty. Reusing it.')
		if not exists(five_gc_dmf_dir):
			cmd = 'mkdir ' + five_gc_dmf_dir
			print (cmd)
			if os.system(cmd) != 0:
				status = 1
				verbose_print ('ERROR: cannot create ' + five_gc_dmf_dir)
				exit()
		else:
			print ('Warning: ' + five_gc_dmf_dir + ' not empty. Reusing it.')

	#Copy SuiteReader to work_dir
	cmd = 'cp ' + suiteReader + ' ' + work_dir
	if os.system(cmd)==0:
		verbose_print ('SuiteReader copied to ' +  work_dir)
		suiteReader = work_dir + 'SuiteReader.jar' 
		cmd = 'chmod 777 ' + suiteReader
		if not os.system(cmd)==0:
			print ('ERROR: Failed to chmod ' + suiteReader)
			exit()	
	else:
		print ('ERROR: Failed to copy ' + suiteReader + ' to ' + work_dir)
		exit()

	# before generating XML files, need to make sure there's no file opened
	# under tc/session and tc/sessiondmf to avoid possible conflict
	print ('checking if any file opened in ' + p4_session_dir)
	for f in os.listdir(p4_session_dir):
		file = os.path.join(p4_session_dir, f)
		if os.access(file, os.W_OK):
			print ('Error: Please revert all changes under ' + p4_session_dir)
			exit()
	print ('checking if any file opened in ' + p4_dmf_dir)
	for f in os.listdir(p4_dmf_dir):
		file = os.path.join(p4_dmf_dir, f)
		if os.access(file, os.W_OK):
			print ('Error: Please revert all changes under ' + p4_dmf_dir)
			exit()

	
	# loop through ste directory and process each individual ste
	input_ste_list = os.listdir(input_dir)
	testCounter = 0
	status = 0
	for inputSte in input_ste_list:
		if not inputSte.endswith('.ste'):
			continue
		testCounter += 1
		# Copy user ste to work directory
		cmd = 'cp ' + input_dir + '/' + inputSte + ' ' + work_dir
		if os.system(cmd)==0:
			verbose_print (inputSte + ' copied to ' + work_dir)
			inputSte = work_dir + inputSte
		else:
			print ('ERROR: Failed to copy ', inputSte, ' to ', work_dir)
			exit()

		# run SuiteReader for this ste file
		print ('-------------------------------------------------------------------------')
		print ('Processing ', inputSte, '...')
		if '-CO_' in inputSte or '-CO-' in inputSte or '_CO_' in inputSte or '_CO-' in inputSte:
			library = '-510'
		else:
			library = '-511'
		cmd = "echo -ne '\n' | java -jar " + suiteReader + ' ' + inputSte + ' ' + library 
		if os.system(cmd)!=0:
			print ('ERROR: execute ', suiteReader, 'failed.')
			status = 1
	
		if status==0 and exists(five_gc_dmf_dir_tmp) and exists(five_gc_session_dir_tmp):
			print ('5GC session XML files generated successfully')
		else:
			status = 1

		# Check result session xml
		status = processFolder('session', five_gc_session_dir_tmp, five_gc_session_dir, p4_session_dir, isPartial)

		# Check result dmf xml
		if status == 0 and exists(five_gc_dmf_dir_tmp):
			status = processFolder('sessiondmf', five_gc_dmf_dir_tmp, five_gc_dmf_dir, p4_dmf_dir, isPartial)
		
		if status == 1:
			print ('Failed to process ' + inputSte)
		else:
			print ('-------Success--------------------------------------------------------')

		# remove temporary directories
		if not isPartial:
			cmd  = 'cd ' + work_dir + '; rm -rf temp_result SavedTCs.xml Sessions.xml vsas/ sessions/ dmfs/ sessiondmfs/ tdfs-511/ tdfs-510'
		else:
			cmd  = 'cd ' + work_dir + '; rm -rf temp_result SavedTCs.xml Sessions.xml vsas/ sessions/ dmfs/ sessiondmfs/ tcl/ tdf/ tdfs-511/ tdfs-510/'
		verbose_print (cmd)
		if os.system(cmd)!=0:
			print ('ERROR: failed to remove temporary files and folders') 
			exit()
		else:
			print ('temporary files and folder removed successfully')
	
		# remove temporary ste in the work dir
		cmd  = 'rm -f ' + inputSte
		verbose_print (cmd)
		if os.system(cmd) != 0:
			status = 1
			print ('ERROR: cannot remove ' + inputSte)
		
		if status == 1:
			break
 
	# end of processing individual ste

	if status == 0:
		print ('Totally ' + str(testCounter) + ' ste files processed')
		# if partial build, create empty folders needed for TestSuiteBuilder
		if isPartial:
			cmd = 'mkdir ' + tcl_dir + ' ' + tdf_dir + ' ' +  java_dir
			verbose_print (cmd)
			if os.system(cmd) != 0:
				status = 1
				print ('ERROR: cannot create temp folders')
	
	# check if any error with DMF
	if status == 0:
		errCount = checkDmf('./session/', './sessiondmf')
		if errCount > 0:
			print ('Error: please revolve possible ' + str(errCount) + ' DMF issues')
			status = 1

	# Build output ste
	if status == 0 and testCounter > 0:
		cmd = 'java -Xmx356m -jar ' + testSuiteBuilder + ' -version=99.9.0.' + outputSuffix + ' ' + work_dir
		print (cmd)
		if os.system(cmd) != 0:
			print ('ERROR: Failed to build offcial ste')
	else:
		print ('ERROR: Failed to generate test suite')

	if isPartial:
		cmd = 'rm -rf ' + tcl_dir + ' ' + tdf_dir + ' ' +  java_dir
		verbose_print (cmd)
		if os.system(cmd) != 0:
			status = 1
			print ('ERROR: cannot remove temp folders')

	# Change path back, TODO: add exception handling
	os.chdir(prevPath)
	verbose_print ('now path:' + os.getcwd())

	# remove temporary suiteReader file under work_dir if exists
	if exists(suiteReader):
		cmd = 'rm -f ' + suiteReader
		verbose_print (cmd)
		if os.system(cmd)!=0:
			print ('ERROR: failed to remove temp file') 
			exit()

if __name__ == "__main__":
  main(sys.argv[1:])
